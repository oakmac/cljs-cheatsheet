[
  "cljs.core/*",
  "cljs.core/+",
  "cljs.core/-",
  "cljs.core/->",
  "cljs.core/->>",
  "cljs.core//",
  "cljs.core/<",
  "cljs.core/<=",
  "cljs.core/=",
  "cljs.core/==",
  "cljs.core/>",
  "cljs.core/>=",
  "cljs.core/aclone",
  "cljs.core/add-watch",
  "cljs.core/aget",
  "cljs.core/and",
  "cljs.core/apply",
  "cljs.core/array",
  "cljs.core/array-map",
  "cljs.core/array?",
  "cljs.core/as->",
  "cljs.core/aset",
  "cljs.core/assoc",
  "cljs.core/assoc-in",
  "cljs.core/associative?",
  "cljs.core/atom",
  "cljs.core/bit-and",
  "cljs.core/bit-and-not",
  "cljs.core/bit-clear",
  "cljs.core/bit-flip",
  "cljs.core/bit-not",
  "cljs.core/bit-or",
  "cljs.core/bit-set",
  "cljs.core/bit-shift-left",
  "cljs.core/bit-shift-right",
  "cljs.core/bit-test",
  "cljs.core/bit-xor",
  "cljs.core/butlast",
  "cljs.core/case",
  "cljs.core/catch",
  "cljs.core/char",
  "cljs.core/clj->js",
  "cljs.core/coll?",
  "cljs.core/comp",
  "cljs.core/compare",
  "cljs.core/compare-and-set!",
  "cljs.core/complement",
  "cljs.core/concat",
  "cljs.core/cond",
  "cljs.core/cond->",
  "cljs.core/cond->>",
  "cljs.core/condp",
  "cljs.core/conj",
  "cljs.core/cons",
  "cljs.core/constantly",
  "cljs.core/contains?",
  "cljs.core/count",
  "cljs.core/counted?",
  "cljs.core/cycle",
  "cljs.core/dec",
  "cljs.core/declare",
  "cljs.core/def",
  "cljs.core/defn",
  "cljs.core/defn-",
  "cljs.core/deref",
  "cljs.core/disj",
  "cljs.core/dissoc",
  "cljs.core/distinct",
  "cljs.core/distinct?",
  "cljs.core/doall",
  "cljs.core/dorun",
  "cljs.core/doseq",
  "cljs.core/dotimes",
  "cljs.core/drop",
  "cljs.core/drop-last",
  "cljs.core/drop-while",
  "cljs.core/empty",
  "cljs.core/empty?",
  "cljs.core/even?",
  "cljs.core/every-pred",
  "cljs.core/every?",
  "cljs.core/false?",
  "cljs.core/ffirst",
  "cljs.core/filter",
  "cljs.core/filterv",
  "cljs.core/finally",
  "cljs.core/find",
  "cljs.core/first",
  "cljs.core/flatten",
  "cljs.core/fn",
  "cljs.core/fn?",
  "cljs.core/fnext",
  "cljs.core/fnil",
  "cljs.core/for",
  "cljs.core/frequencies",
  "cljs.core/get",
  "cljs.core/get-in",
  "cljs.core/get-validator",
  "cljs.core/group-by",
  "cljs.core/hash-map",
  "cljs.core/hash-set",
  "cljs.core/identical?",
  "cljs.core/identity",
  "cljs.core/if",
  "cljs.core/if-let",
  "cljs.core/if-not",
  "cljs.core/if-some",
  "cljs.core/ifn?",
  "cljs.core/inc",
  "cljs.core/instance?",
  "cljs.core/int",
  "cljs.core/integer?",
  "cljs.core/interleave",
  "cljs.core/interpose",
  "cljs.core/into",
  "cljs.core/into-array",
  "cljs.core/iterate",
  "cljs.core/js->clj",
  "cljs.core/js-delete",
  "cljs.core/js-keys",
  "cljs.core/js-obj",
  "cljs.core/juxt",
  "cljs.core/keep",
  "cljs.core/keep-indexed",
  "cljs.core/key",
  "cljs.core/keys",
  "cljs.core/last",
  "cljs.core/lazy-cat",
  "cljs.core/lazy-seq",
  "cljs.core/let",
  "cljs.core/letfn",
  "cljs.core/list",
  "cljs.core/list*",
  "cljs.core/list?",
  "cljs.core/make-array",
  "cljs.core/map",
  "cljs.core/map-indexed",
  "cljs.core/map?",
  "cljs.core/mapcat",
  "cljs.core/mapv",
  "cljs.core/max",
  "cljs.core/max-key",
  "cljs.core/memoize",
  "cljs.core/merge",
  "cljs.core/merge-with",
  "cljs.core/min",
  "cljs.core/min-key",
  "cljs.core/mod",
  "cljs.core/name",
  "cljs.core/neg?",
  "cljs.core/next",
  "cljs.core/nfirst",
  "cljs.core/nil?",
  "cljs.core/nnext",
  "cljs.core/not",
  "cljs.core/not-any?",
  "cljs.core/not-empty",
  "cljs.core/not-every?",
  "cljs.core/not=",
  "cljs.core/ns",
  "cljs.core/nth",
  "cljs.core/nthnext",
  "cljs.core/nthrest",
  "cljs.core/number?",
  "cljs.core/object?",
  "cljs.core/odd?",
  "cljs.core/or",
  "cljs.core/partial",
  "cljs.core/partition",
  "cljs.core/partition-all",
  "cljs.core/partition-by",
  "cljs.core/peek",
  "cljs.core/pop",
  "cljs.core/pos?",
  "cljs.core/quot",
  "cljs.core/rand",
  "cljs.core/rand-int",
  "cljs.core/rand-nth",
  "cljs.core/range",
  "cljs.core/re-find",
  "cljs.core/re-matches",
  "cljs.core/re-pattern",
  "cljs.core/re-seq",
  "cljs.core/realized?",
  "cljs.core/reduce",
  "cljs.core/reduce-kv",
  "cljs.core/reductions",
  "cljs.core/rem",
  "cljs.core/remove",
  "cljs.core/remove-watch",
  "cljs.core/repeat",
  "cljs.core/repeatedly",
  "cljs.core/replace",
  "cljs.core/reset!",
  "cljs.core/rest",
  "cljs.core/reverse",
  "cljs.core/reversible?",
  "cljs.core/rseq",
  "cljs.core/rsubseq",
  "cljs.core/second",
  "cljs.core/select-keys",
  "cljs.core/seq",
  "cljs.core/seq?",
  "cljs.core/sequential?",
  "cljs.core/set",
  "cljs.core/set!",
  "cljs.core/set-validator!",
  "cljs.core/set?",
  "cljs.core/shuffle",
  "cljs.core/some",
  "cljs.core/some->",
  "cljs.core/some->>",
  "cljs.core/some-fn",
  "cljs.core/some?",
  "cljs.core/sort",
  "cljs.core/sort-by",
  "cljs.core/sorted-map",
  "cljs.core/sorted-map-by",
  "cljs.core/sorted-set",
  "cljs.core/sorted-set-by",
  "cljs.core/sorted?",
  "cljs.core/split-at",
  "cljs.core/split-with",
  "cljs.core/str",
  "cljs.core/string?",
  "cljs.core/subs",
  "cljs.core/subseq",
  "cljs.core/subvec",
  "cljs.core/swap!",
  "cljs.core/take",
  "cljs.core/take-last",
  "cljs.core/take-nth",
  "cljs.core/take-while",
  "cljs.core/throw",
  "cljs.core/to-array-2d",
  "cljs.core/tree-seq",
  "cljs.core/true?",
  "cljs.core/try",
  "cljs.core/unsigned-bit-shift-right",
  "cljs.core/update-in",
  "cljs.core/val",
  "cljs.core/vals",
  "cljs.core/vec",
  "cljs.core/vector",
  "cljs.core/vector?",
  "cljs.core/when",
  "cljs.core/when-first",
  "cljs.core/when-let",
  "cljs.core/when-not",
  "cljs.core/when-some",
  "cljs.core/while",
  "cljs.core/zero?",
  "cljs.core/zipmap",
  "clojure.set/difference",
  "clojure.set/intersection",
  "clojure.set/select",
  "clojure.set/subset?",
  "clojure.set/superset?",
  "clojure.set/union",
  "clojure.string/blank?",
  "clojure.string/capitalize",
  "clojure.string/escape",
  "clojure.string/join",
  "clojure.string/lower-case",
  "clojure.string/replace",
  "clojure.string/replace-first",
  "clojure.string/reverse",
  "clojure.string/split",
  "clojure.string/split-lines",
  "clojure.string/trim",
  "clojure.string/trim-newline",
  "clojure.string/triml",
  "clojure.string/trimr",
  "clojure.string/upper-case"
]